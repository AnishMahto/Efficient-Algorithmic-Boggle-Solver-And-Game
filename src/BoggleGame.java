
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JLabel;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JTextArea;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author anishmahto
 * Date Aug 21, 2018
 * Purpose: this program is the main game screen of the application
 */
public class BoggleGame extends javax.swing.JFrame {

    /**
     * Creates new form BoggleGame
     */
    public BoggleGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupTimerOptions = new javax.swing.ButtonGroup();
        jScrollPaneFullFrame = new javax.swing.JScrollPane();
        pnlBackground = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtWordsFound = new javax.swing.JTextArea();
        lblLetter1 = new javax.swing.JLabel();
        lblLetter2 = new javax.swing.JLabel();
        lblLetter3 = new javax.swing.JLabel();
        lblLetter4 = new javax.swing.JLabel();
        lblLetter8 = new javax.swing.JLabel();
        lblLetter7 = new javax.swing.JLabel();
        lblLetter6 = new javax.swing.JLabel();
        lblLetter5 = new javax.swing.JLabel();
        lblLetter16 = new javax.swing.JLabel();
        lblLetter12 = new javax.swing.JLabel();
        lblLetter11 = new javax.swing.JLabel();
        lblLetter10 = new javax.swing.JLabel();
        lblLetter9 = new javax.swing.JLabel();
        lblLetter13 = new javax.swing.JLabel();
        lblLetter15 = new javax.swing.JLabel();
        lblLetter14 = new javax.swing.JLabel();
        btnPlay = new javax.swing.JButton();
        lblTimer = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        btnAddWord = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        btnCompAnalysis = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnInstructions = new javax.swing.JButton();
        btnChangeTimer = new javax.swing.JButton();
        radBtn30 = new javax.swing.JRadioButton();
        radBtn60 = new javax.swing.JRadioButton();
        radBtn90 = new javax.swing.JRadioButton();
        radBtn120 = new javax.swing.JRadioButton();
        radBtn150 = new javax.swing.JRadioButton();
        radBtn180 = new javax.swing.JRadioButton();
        btnHome = new javax.swing.JButton();
        btnRotate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPaneFullFrame.setMaximumSize(new java.awt.Dimension(1043, 891));
        jScrollPaneFullFrame.setPreferredSize(new java.awt.Dimension(1043, 741));

        pnlBackground.setBackground(new java.awt.Color(255, 255, 255));
        pnlBackground.setAutoscrolls(true);
        pnlBackground.setPreferredSize(new java.awt.Dimension(1043, 1000));

        txtWordsFound.setEditable(false);
        txtWordsFound.setColumns(20);
        txtWordsFound.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txtWordsFound.setRows(5);
        txtWordsFound.setText("Your Words Found: ");
        jScrollPane1.setViewportView(txtWordsFound);

        lblLetter1.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter1.setText("A");
        lblLetter1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter2.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter2.setText("A");
        lblLetter2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter3.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter3.setText("A");
        lblLetter3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter4.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter4.setText("A");
        lblLetter4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter8.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter8.setText("A");
        lblLetter8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter7.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter7.setText("A");
        lblLetter7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter6.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter6.setText("A");
        lblLetter6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter5.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter5.setText("A");
        lblLetter5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter16.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter16.setText("A");
        lblLetter16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter12.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter12.setText("A");
        lblLetter12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter11.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter11.setText("A");
        lblLetter11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter10.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter10.setText("A");
        lblLetter10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter9.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter9.setText("A");
        lblLetter9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter13.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter13.setText("A");
        lblLetter13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter15.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter15.setText("A");
        lblLetter15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblLetter14.setFont(new java.awt.Font("Arial", 1, 128)); // NOI18N
        lblLetter14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLetter14.setText("A");
        lblLetter14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblLetter14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnPlay.setBackground(new java.awt.Color(46, 204, 113));
        btnPlay.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnPlay.setForeground(new java.awt.Color(255, 255, 255));
        btnPlay.setText("Play");
        btnPlay.setBorder(null);
        btnPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPlayMouseClicked(evt);
            }
        });

        lblTimer.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        lblTimer.setText("Timer: 03:00");

        txtInput.setEditable(false);
        txtInput.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        txtInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtInputKeyPressed(evt);
            }
        });

        btnAddWord.setBackground(new java.awt.Color(52, 73, 94));
        btnAddWord.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnAddWord.setForeground(new java.awt.Color(255, 255, 255));
        btnAddWord.setText("Enter Word");
        btnAddWord.setBorder(null);
        btnAddWord.setEnabled(false);
        btnAddWord.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddWordMouseClicked(evt);
            }
        });

        lblMessage.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblMessage.setText("Messages Will Go Here.");

        btnCompAnalysis.setBackground(new java.awt.Color(52, 73, 94));
        btnCompAnalysis.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnCompAnalysis.setForeground(new java.awt.Color(255, 255, 255));
        btnCompAnalysis.setText("Computer Analysis");
        btnCompAnalysis.setBorder(null);
        btnCompAnalysis.setBorderPainted(false);
        btnCompAnalysis.setEnabled(false);
        btnCompAnalysis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCompAnalysisMouseClicked(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Arial", 1, 70)); // NOI18N
        lblTitle.setText("Boggle!");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("<HTML>Welcome to Boggle! If you already know how to play, feel free to jump right in. Otherwise, click the instructions button (you may need to scroll down)!<HTML>");

        btnInstructions.setBackground(new java.awt.Color(46, 204, 113));
        btnInstructions.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnInstructions.setForeground(new java.awt.Color(255, 255, 255));
        btnInstructions.setText("Instructions");
        btnInstructions.setBorder(null);
        btnInstructions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInstructionsMouseClicked(evt);
            }
        });

        btnChangeTimer.setBackground(new java.awt.Color(192, 57, 43));
        btnChangeTimer.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnChangeTimer.setForeground(new java.awt.Color(255, 255, 255));
        btnChangeTimer.setText("Change Timer");
        btnChangeTimer.setBorder(null);
        btnChangeTimer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnChangeTimerMouseClicked(evt);
            }
        });

        radBtn30.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupTimerOptions.add(radBtn30);
        radBtn30.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        radBtn30.setForeground(new java.awt.Color(0, 0, 0));
        radBtn30.setText("30 Seconds");

        radBtn60.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupTimerOptions.add(radBtn60);
        radBtn60.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        radBtn60.setForeground(new java.awt.Color(0, 0, 0));
        radBtn60.setText("1 Minute");

        radBtn90.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupTimerOptions.add(radBtn90);
        radBtn90.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        radBtn90.setForeground(new java.awt.Color(0, 0, 0));
        radBtn90.setText("1 Minute 30 Seconds");

        radBtn120.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupTimerOptions.add(radBtn120);
        radBtn120.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        radBtn120.setForeground(new java.awt.Color(0, 0, 0));
        radBtn120.setText("2 Minutes");

        radBtn150.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupTimerOptions.add(radBtn150);
        radBtn150.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        radBtn150.setForeground(new java.awt.Color(0, 0, 0));
        radBtn150.setText("2 Minutes 30 Seconds");

        radBtn180.setBackground(new java.awt.Color(255, 255, 255));
        btnGroupTimerOptions.add(radBtn180);
        radBtn180.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        radBtn180.setForeground(new java.awt.Color(0, 0, 0));
        radBtn180.setText("3 Minutes");

        btnHome.setBackground(new java.awt.Color(52, 73, 94));
        btnHome.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnHome.setForeground(new java.awt.Color(255, 255, 255));
        btnHome.setText("Home");
        btnHome.setBorder(null);
        btnHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHomeMouseClicked(evt);
            }
        });

        btnRotate.setBackground(new java.awt.Color(142, 68, 173));
        btnRotate.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        btnRotate.setForeground(new java.awt.Color(255, 255, 255));
        btnRotate.setText("Rotate Board CCW");
        btnRotate.setBorder(null);
        btnRotate.setEnabled(false);
        btnRotate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRotateMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlBackgroundLayout = new javax.swing.GroupLayout(pnlBackground);
        pnlBackground.setLayout(pnlBackgroundLayout);
        pnlBackgroundLayout.setHorizontalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addGap(526, 526, 526)
                .addComponent(lblTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addComponent(lblLetter13, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblLetter14, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLetter15, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLetter16, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlBackgroundLayout.createSequentialGroup()
                            .addComponent(lblLetter5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblLetter6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblLetter7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblLetter8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlBackgroundLayout.createSequentialGroup()
                            .addComponent(lblLetter1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblLetter2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblLetter3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lblLetter4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addComponent(lblLetter9, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblLetter10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLetter11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLetter12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(45, 45, 45)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddWord, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radBtn60, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radBtn30, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radBtn90, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radBtn120, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radBtn150, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radBtn180, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRotate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPlay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnChangeTimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInstructions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCompAnalysis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnHome, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
                        .addGap(38, 38, 38))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap(97, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );
        pnlBackgroundLayout.setVerticalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                                .addGap(131, 131, 131)
                                .addComponent(btnRotate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnHome, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnInstructions, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCompAnalysis, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(lblTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddWord, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnChangeTimer, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radBtn30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radBtn60)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radBtn90)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radBtn120)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radBtn150)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radBtn180))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLetter1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLetter5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLetter9, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLetter13, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter14, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter15, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLetter16, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(307, Short.MAX_VALUE))
        );

        jScrollPaneFullFrame.setViewportView(pnlBackground);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPaneFullFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 1404, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPaneFullFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void close () {
        //this close method segment is something I learned from ICS 3UE (Mr. Leduchowiski's class) for the final project in July, and am reusing it here.
        //the method helps me close the current page after opening another page
        WindowEvent winClosingEvent = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
    }
    
    /**
     * @param intSeconds as the number of seconds the user currently has remaining
     * @return the number of seconds formatted in minutes:seconds
     * Purpose: to neatly format the number of seconds the user has remaining, and return it as a string
     */
    String showTime (int intSeconds) {
        //create an instance of the DecimalFormat class, so that we can print leading and trailing zeros
        DecimalFormat leadingZero = new DecimalFormat ("00");
        //detremine the number of minutes remaining using integer division, dividing the number of seconds by 60
        int intMinutes = intSeconds/60;
        //determine the number of seconds remaining (not including minutes) by subtracting out the number of minutes times the number of seconds in a minute
        intSeconds = intSeconds - intMinutes*60;
        //finally, return the time formatted using the leadingZero object
        return leadingZero.format(intMinutes) + ":" + leadingZero.format(intSeconds);
    }
    
    //declare a global arraylist to store the words the user has correctly found so far
    ArrayList <String> strUserWords = new ArrayList <String>();
    //declare an instance of the BoggleSolver class, as it stores many of the key aglorithms used in this application
    BoggleSolver solver = new BoggleSolver();
    //declare a 2d array to store references to the lblLetter objects in the GUI
    JLabel [][] objName;
    //declare JLabel variables to store references to the timer and message lbl objects
    JLabel refLblTimer, refLblMessage;
    //declare a JTextArea variable to store a reference to the words found text area object
    JTextArea refTxtWordsFound;
    //create and initialize a 2d character array, to store the letters in each cell of the Boggle board
    char [][] charBoard = new char[4][4];
    //declare integer variables to store the time remaining, the users current score, and the total time the user starts with (set to a default standard of 180 seconds)
    int intSecondsRemaining = 0, intUserScore = 0, intTotalTime = 180;
    //declare a boolean variable to store whether the clock (and hence game) is currently running or not
    boolean clockRunning = false;
    //declare variables for the Timer and TimerTask respectively
    Timer gameClock = new Timer();
    TimerTask runGame;
    
    /**
     * Pre-conditions: N/A
     * Post-conditions: N/A
     * Purpose: to carry out any necessary tasks right after the game has ended/timer runs out
     */
    void stopGameClock () {
        //cancel the current game clock, so we can create a new instance again later
        runGame.cancel();
        //as the clock has been cancelled, set the clockRunning boolean as false
        clockRunning = false;
        //display the total score the user has achieved 
        refLblMessage.setText("Your Score: " + intUserScore);
        //create a string variable that stores the users statistics (score + total number of words found)
        String strAddStats = refLblMessage.getText() + "\n" + "Total Words You Found: " + strUserWords.size() + "\n";
        //set the words found textarea to the strAddStats variable
        refTxtWordsFound.setText(refTxtWordsFound.getText() + strAddStats);
        //now that the game is over, disable buttons to add word or rotate board, and disable txtInput textfield
        this.btnAddWord.setEnabled(false);
        this.txtInput.setEditable(false);
        this.btnRotate.setEnabled(false);
        //we can now all the user to request a computer analysis or change the timer for the next game they play
        this.btnCompAnalysis.setEnabled(true);
        this.btnChangeTimer.setEnabled(true);
    }
    
    /**
     * Pre-conditions: N/A
     * Post-conditions: N/A
     * Purpose: to carry out any necessary tasks right before a new game of Boggle begins
     */
    void init () {
        //because at least one game has been played so far if this method is run, set the text of the play button equal to "Play Again"
        this.btnPlay.setText("Play Again");
        //the game will start, so set the add word button as enabled (so the user can add words)
        this.btnAddWord.setEnabled(true);
        //the game will start, so set the rotate button as enabled (so the user can rotate the board)
        this.btnRotate.setEnabled(true);
        //during the game we cannot allow the user to change the time remaining, so disable that button
        this.btnChangeTimer.setEnabled(false);
        //to allow the user to begin inputting words, set the txtInput textfield as enabled
        this.txtInput.setEditable(true);
        //during the game we cannot allow the user to cheat by using computer analysis, so set the button as disabled
        this.btnCompAnalysis.setEnabled(false);
        //clear the text of the txtInput textfield
        this.txtInput.setText("");
        //clear the text of the message label
        this.lblMessage.setText("");
        //reset the txtWordsFound textarea to the default message
        this.txtWordsFound.setText("Your Words Found: \n");
        //make certain variables point to their gui object, as we will need to reference them in methods where "this" does not refer to the GUI objects
        refLblTimer = this.lblTimer;
        refLblMessage = this.lblMessage;
        refTxtWordsFound = this.txtWordsFound;
        //set the user score to 0
        intUserScore = 0;
        //clear any words the user may have found in previous rounds
        strUserWords.clear();
        //initalize the objName 2d array such that each cell points to its respective lblLetter
        objName = new JLabel[][] {{this.lblLetter1, this.lblLetter2, this.lblLetter3, this.lblLetter4}, {this.lblLetter5, this.lblLetter6, this.lblLetter7, this.lblLetter8}, {this.lblLetter9, this.lblLetter10, this.lblLetter11, this.lblLetter12}, {this.lblLetter13, this.lblLetter14, this.lblLetter15, this.lblLetter16}};
        //using the generateBoard() method, randomly generate a new board and store the string version of this board in a string variable
        String strBoard = solver.generateBoard();
        for (int x = 0; x < 4; x++) {
            for (int i = 0; i < 4; i++) {
                //loop through every cell in the Boggle board, and set it equal to its corresponding letter in the strBoard string
                charBoard[x][i] = strBoard.charAt(x*4+i);
                //set the corresponding lblLetter's text equal to the letter in this cell
                objName[x][i].setText("" + charBoard[x][i]);
            }
        }
        //use the fillTrie() method to insert all English words into the trie data structure beforehand, so we can query words efficiently
        solver.fillTrie();
        //use the initFindWords() method which will then call several algorithms to solve the current Boggle board
        solver.initFindWords();
    }
    
    private void btnPlayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPlayMouseClicked
        //if the play button is clicked, we need to start a new Boggle game
        if (clockRunning) {
            //if the timer is already running that means a game is already in play. So, we need to stop the current game clock/timer using the stopGameClock() method
            stopGameClock();
        }
        //next, we will use the init() method to complete any necessary tasks before starting a new game
        init();
        //we need to set the current timer equal to the total time the user has selected (the default is 180 seconds)
        intSecondsRemaining = intTotalTime;
        //as a new game and timer will start, set the clockRunning boolean equal to true
        clockRunning = true;
        //actually create the new instance of a timer task, so that it begins
        runGame = new TimerTask () {
            public void run () {
                //the run method in the timer is executed every second
                //every second, reduce the number of seconds remaining by 1
                intSecondsRemaining--;
                //set the timer lbl text equal to the new amount of seconds remaining, formatted using the showTime() method
                refLblTimer.setText("Timer: " + showTime (intSecondsRemaining));
                if (intSecondsRemaining==0) {
                    //if the number if seconds remaining equals 0, the game is over, so we need to stop the timer using a return statement, and carry out any necessary procedures in the stopGameClock() method
                    stopGameClock();
                    return;
                }
            }
        };
        //this line of code is executed right after the runGame timer is initiated
        gameClock.scheduleAtFixedRate(runGame, 0, 1000); //set the delay to 0, set the run() method's interval to 1000ms (1 second), and set the delay to 0ms
    }//GEN-LAST:event_btnPlayMouseClicked

    /**
     * 
     * @param strWord as the string/word to check if it already exists
     * @return true if the word already exists in the strUserWords arraylist, false otherwise
     * Purpose: to determine if a word the user inputted already exists in the users guessed words (to avoid duplicates) using linear search
     */
    boolean boolAlreadyFound (String strWord) {
        for (int x = 0; x < strUserWords.size(); x++) {
            //loop through all the elements in the strUserWords arraylist
            if (strUserWords.get(x).equals(strWord)) {
                //if the current element equals the strWord variable, return true as it is found
                return true;
            }
        }
        //if the method reaches this point the word has not been found, so return false
        return false;
    }
    
    /**
     * Pre-condition: N/A
     * Post-condition: N/A
     * Purpose: get the text the user inputted in the txtInput textfield, check if the word is a valid word, and print out the appropriate message
     */
    void getUserInput () {
        //get the user input, convert it to uppercase (as all the words in the game are compared in uppercase), and store it in a variable
        String strInput = this.txtInput.getText().toUpperCase();
        if (boolAlreadyFound (strInput)) {
            //using the boolAlreadyFound() method, check if the user has already inputted the word they are currenty inputting
            //if the word has already been inputted, output an appropriate message
            lblMessage.setText("Word Already Found.");
        } else if (solver.checkUserWordIntermediary(strInput)) {
            //otherwise if the word has not already been inserted, use the checkUserWordIntermediary() method to check if the word inputted is a valid answer in the Boggle board
            //if it is, add the points the word is associated with to the total score, using the intWordPts() method
            intUserScore += solver.intWordPts (strInput);
            //also, in the words found textarea, output the word found along with the points it is associated with
            this.txtWordsFound.setText(txtWordsFound.getText() + strInput + " (" + solver.intWordPts (strInput) + ")" + "\n");
            //add the word found to the strUserWords arraylist, so we can compare it to future input later
            strUserWords.add (strInput);
            //output an appropriate message to lblMessage
            lblMessage.setText("Valid Word!");
        } else {
            //otherwise the word is simply in invalid word (not found in the Boggle board or is not an English word), so output an appropriate message to lblMessage
            lblMessage.setText("Invalid Word.");
        }
        //clear the txtInput textfield
        this.txtInput.setText("");
    }
    
    private void btnAddWordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddWordMouseClicked
        if (!this.btnAddWord.isEnabled()) {
            //the mouse clicked event still fires even if the button is disabled, so we need to directly check if it is enabled
            //if it is not disabled we should just end this method execution right away
            return;
        }
        //if the add word button is clicked, carry out the input procedure by using the getUserInput() method
        getUserInput();
    }//GEN-LAST:event_btnAddWordMouseClicked

    private void txtInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInputKeyPressed
        //https://stackoverflow.com/questions/4419667/detect-enter-press-in-jtextfield/4420301
        //if the enter key is clicked on the user's keyboard, we want to simulate submitting a word (for easier usage, as click a button each time to submit a word can get annoying)
        if (evt.getKeyCode()== KeyEvent.VK_ENTER) {
            //check if the current key pressed is the equal to the "enter" key 
            //if it is, carry out the user input procedure by using the getUserInput() method 
            getUserInput();
        }
    }//GEN-LAST:event_txtInputKeyPressed

    private void btnCompAnalysisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCompAnalysisMouseClicked
        if (!this.btnCompAnalysis.isEnabled()) {
            //the mouse clicked event still fires even if the button is disabled, so we need to directly check if it is enabled
            //if it is not disabled we should just end this method execution right away
            return;
        }
        //declare a string variable to store the answers returned by strCompAnalysis(), and also create a string variable to store a note on the answers generated
        String strCompAnalysis = solver.strCompAnalysis(), strNote = "Note: Boggle words can vary depending on the English dictionary used. To view the dictionary this program uses, view the \"EnglishWords.txt\" file\n";
        //set the text of the txtWordsFound text area to the note + the computer analysis + whatever text was already there
        //this effectively appends the computer analysis and note to the top of the textarea
        this.txtWordsFound.setText(strNote + strCompAnalysis + this.txtWordsFound.getText());
        //since the computer analysis has been completed, we can now disable the button
        this.btnCompAnalysis.setEnabled(false);
    }//GEN-LAST:event_btnCompAnalysisMouseClicked

    private void btnInstructionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInstructionsMouseClicked
        //create instance of the BoggleRules JFrame
        BoggleRules boggleRulesPage = new BoggleRules();
        //set the instantiated JFrame as visible
        boggleRulesPage.setVisible(true);
        //close the current JFrame
        close();
    }//GEN-LAST:event_btnInstructionsMouseClicked

    private void btnChangeTimerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnChangeTimerMouseClicked
        if (!this.btnChangeTimer.isEnabled()) {
            //the mouse clicked event still fires even if the button is disabled, so we need to directly check if it is enabled
            //if it is not disabled we should just end this method execution right away
            return;
        }
        //if the change timer button is clicked, we must reset the timer according to the radio button the user selected
        //note that the gui only allows one radio button to be selected at most, as all the buttons are part of a button group 
        if (this.radBtn30.isSelected()) {
            //if the 30 second radio button is selected, the total time should be set to 30 seconds
            intTotalTime = 30;
        } else if (this.radBtn60.isSelected()) {
            //if the 60 second radio button is selected, the total time should be set to 60 seconds
            intTotalTime = 60;
        } else if (this.radBtn90.isSelected()) {
            //if the 90 second radio button is selected, the total time should be set to 90 seconds
            intTotalTime = 90;
        } else if (this.radBtn120.isSelected()) {
            //if the 120 second radio button is selected, the total time should be set to 120 seconds
            intTotalTime = 120;
        } else if (this.radBtn150.isSelected()) {
            //if the 150 second radio button is selected, the total time should be set to 150 seconds
            intTotalTime = 150;
        } else if (this.radBtn180.isSelected()) {
            //if the 180 second radio button is selected, the total time should be set to 180 seconds
            intTotalTime = 180;
        } else {
            //otherwise if the button is clicked but no option is selected, set the timer to the standard Boggle time; 180 seconds (3 minutes)
            intTotalTime = 180;
        }
        //set the timer label equal to the the number of seconds formatted using the showTime method
        this.lblTimer.setText("Timer: " + showTime(intTotalTime));
    }//GEN-LAST:event_btnChangeTimerMouseClicked

    private void btnHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseClicked
        //create instance of the HomePage JFrame
        HomePage homePage = new HomePage();
        //set the instantiated JFrame to visible
        homePage.setVisible(true);
        //close the current JFrame
        close();
    }//GEN-LAST:event_btnHomeMouseClicked

    private void btnRotateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRotateMouseClicked
        if (!this.btnRotate.isEnabled()) {
            //the mouse clicked event still fires even if the button is disabled, so we need to directly check if it is enabled
            //if it is not disabled we should just end this method execution right away
            return;
        }
        //if the rotate button is clicked, we need to rotate the current Boggle board counter clock wise
        //to do this, call the rotateBoard() method from the solver class, and store the returned string in strBoard (stores the new board that is rotated, in a string format)
        String strBoard = solver.rotateBoard();
        for (int x = 0; x < 4; x++) {
            for (int i = 0; i < 4; i++) {
                //set the current cell in the board's letter equal to the corresponding letter in the strBoard string
                charBoard[x][i] = strBoard.charAt(x*4+i);
                //set the corresponding label object in the JFrame's text equal to the current cell's letter
                objName[x][i].setText("" + charBoard[x][i]);
            }
        }
    }//GEN-LAST:event_btnRotateMouseClicked

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoggleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoggleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoggleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoggleGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoggleGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddWord;
    private javax.swing.JButton btnChangeTimer;
    private javax.swing.JButton btnCompAnalysis;
    private javax.swing.ButtonGroup btnGroupTimerOptions;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnInstructions;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnRotate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneFullFrame;
    private javax.swing.JLabel lblLetter1;
    private javax.swing.JLabel lblLetter10;
    private javax.swing.JLabel lblLetter11;
    private javax.swing.JLabel lblLetter12;
    private javax.swing.JLabel lblLetter13;
    private javax.swing.JLabel lblLetter14;
    private javax.swing.JLabel lblLetter15;
    private javax.swing.JLabel lblLetter16;
    private javax.swing.JLabel lblLetter2;
    private javax.swing.JLabel lblLetter3;
    private javax.swing.JLabel lblLetter4;
    private javax.swing.JLabel lblLetter5;
    private javax.swing.JLabel lblLetter6;
    private javax.swing.JLabel lblLetter7;
    private javax.swing.JLabel lblLetter8;
    private javax.swing.JLabel lblLetter9;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblTimer;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JRadioButton radBtn120;
    private javax.swing.JRadioButton radBtn150;
    private javax.swing.JRadioButton radBtn180;
    private javax.swing.JRadioButton radBtn30;
    private javax.swing.JRadioButton radBtn60;
    private javax.swing.JRadioButton radBtn90;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextArea txtWordsFound;
    // End of variables declaration//GEN-END:variables
}
